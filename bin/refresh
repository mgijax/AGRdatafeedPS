#!/bin/bash

# ---------------------
if [ ! -r ../Configuration ] ; then
    echo "Cannot read Configuration file."
    exit 1
fi
source ../Configuration

# ---------------------
# Initialize vars
RELEASE_COUNT=""
DO_ALL="true"
VALIDATOR_DIR="../agr_curation_schema"
DO_GENERATE=""
DO_VALIDATE=""
DO_UPLOAD=""
DO_NOCLEANUP=""
DO_UPLOAD_TARGET=""
NO_RUN=""

# ---------------------
function usage {
  echo "
AGRdatafeedPS: for sending data to the Alliance curation database

Usage: $0 [-d output_directory][-p types][-g][-v dir][-u]

Current env settings:
    AGR_CURATION_SCHEMA_VERSION=${AGR_CURATION_SCHEMA_VERSION}
    LOGFILE=${LOGFILE}
    OUTPUT_DIR=${OUTPUT_DIR}
    TOKEN_FILE=${TOKEN_FILE}
	
Options:
-h Print this message and exit.
-l file Specifies a log file. By default, log messages are sent to stdout. Overrides LOGFILE.

-c n	Specifies the update count for this schema version (1, 2, 3, ...).  Optional.
-d dir	Specifies the parent directory where the output directory will be created. Overrides OUTPUT_DIR.
-p types Specify which types(s) to process Argument is a comma-separated list (no spaces) of any of the following:
        g       Genes (and other features)
        a       Alleles
        aa      Allele associations
        c       Constructs
        ca      Construct associations
        v       Variants
        y       Genotypes (AGRs)
        ya      Genotypes associations
        d       Disease annotations

	If no -p option is provided, all types are processed

You need to specify at least one of the following options to actually do anything:
-g  Generate data files specified in -p option.
-v  Validate data files specified in -p option. 
-u  Upload files specified in -p option to the Alliance submission endpoint. 
    Specify the upload target, the upload target is one of curation site: "Production", "Beta", or "Alpha"
      p       Production (default)    https://curation.alliancegenome.org
      b       Beta                    https://beta-curation.alliancegenome.org
      a       Alpha                   https://alpha-curation.alliancegenome.org
-U  Same as -u except cleanUp=false is passed (good for testing small samples).
    Also need to specify the upload target: p, b or a

Debugging:
-N No execute. Skips actually running commands; just prints what it would do.
"
}

# ---------------------------------------
function setFile {
  ftype="$1"
  if [[ ${ftype} == "GFF" ]] ; then
      FILE="${ROOT}_${ftype}.gff3"
  elif [[ ${ftype} == "assembly" ]] ; then
      FILE="${ROOT}_${ftype}.fa.gz"
  else
      FILE="${ROOT}_${ftype}.json"
  fi
}

# ---------------------------------------
function generate {
  ftype="$1"
  script="$2"
  setFile ${ftype}
  logit "Generating ${ftype} file: ${FILE} with command: ${script}"
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  if [[ ${ftype} == "GFF" ]] ; then
      if [[ ${DO_GENERATE} ]] ; then
	  url=${script}
	  curl ${url} | gunzip > ${FILE}
      fi
  elif [[ ${ftype} == "assembly" ]] ; then
      return
  else
      if [[ ${DO_GENERATE} ]] ; then
	  ${PYTHON} ${script} > ${FILE}
	  checkexit
      fi
  fi
}

# ---------------------
# Run the agr validator. 
# Args:
#  $1 = path (from the schema directory) to the curation schema file
#  $2 = full path to the file
function validate {
  ftype=$1
  setFile ${ftype}
  logit "Validating ${FILE} ..."
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  #
  # ASSUMES the validator is checked out to the correct schema version!
  #
  source ./venv/bin/activate
  pushd ../agr_curation_schema
  python util/validate_agr_schema.py -i ${FILE}
  checkexit 
  popd
  logit "Validated: ${FILE}"
  deactivate
}
# ---------------------
# See: https://github.com/alliance-genome/agr_curation#submitting-data
# See: https://${curation_system}.alliancegenome.org/api/version
function upload {
  ftype=$1
  aftype=$2
  curation_system="curation" # also: alpha-curation, beta-curation
  case "$DO_UPLOAD_TARGET" in
    p)
        curation_system="curation"
        ;;
    b)
        curation_system="beta-curation"
        ;;
    a)
        curation_system="alpha-curation"
        ;;
    *)
        echo "Invalid upload target: $DO_UPLOAD_TARGET"
        exit 1  # Exit with an error code
        ;;
  esac

  url="https://${curation_system}.alliancegenome.org/api/data/submit"
  logit "Uploaded url: ${url}"
  if [[ ${DO_NOCLEANUP} ]] ; then
      url="${url}?cleanUp=false"
  fi
  token=`cat ${TOKEN_FILE}`
  setFile ${ftype}
  command="curl --fail-with-body \
    -H \"Authorization: Bearer ${token}\" \
    -X POST \"${url}\" \
    -F \"${aftype}_MGI=@${FILE}\""
  logit "Uploading file with command: ${command}"
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  curl --fail-with-body \
      -H "Authorization: Bearer ${token}" \
      -X POST "${url}" \
      -F "${aftype}_MGI=@${FILE}"
  checkexit
  logit "Uploaded: ${FILE}"
}

# ---------------------------------------
function doPart {
  part="$1"
  script="$2"
  ftype="$3"
  allianceftype="$4"
  if [[ ${DO_ALL} || " ${PARTS[*]} " == *" ${part} "* ]]; then
      if [[ ${DO_GENERATE} ]] ; then
	  generate "${ftype}" "${script}"
      fi
      if [[ ${DO_VALIDATE} ]] ; then
	  validate "${ftype}"
      fi
      if [[ ${DO_UPLOAD} ]] ; then
	  upload "${ftype}" "${allianceftype}"
      fi
  else
      logit "Skipping ${ftype}."
  fi
}

# ---------------------------------------
function parseCommandLine {
    # Process command line args
    until [ -z "$1" ] 
    do
	case "$1" in
	-h)
	    usage
	    exit 0
	    ;;
	-l)
	    shift
	    LOGFILE="$1"
	    ;;
	-g)
	    DO_GENERATE="true"
	    ;;
	-v) 
	    DO_VALIDATE="true"
	    ;;  
	-u) 
	    DO_UPLOAD="true"
        shift
	    DO_UPLOAD_TARGET=${1}        
	    ;;  
        -U)
            shift
	        DO_UPLOAD_TARGET=${1}        
            DO_NOCLEANUP="true"
	        DO_UPLOAD="true"
            ;;
	-p)
	    shift
	    PARTS=(${1//,/ })
	    DO_ALL=""
	    ;;
	-d) 
	    shift
	    OUTPUT_DIR="$1"
	    ;;  
	-R) 
	    shift
	    AGR_CURATION_SCHEMA_VERSION="$1"
	    ;;  
	-c) 
	    shift
	    RELEASE_COUNT="$1"
	    ;;  
	-N)
	    NO_RUN="true"
	    ;;
	*)  
	    usage
	    die "Unrecognized option:" $1
	esac
	shift
    done
    # ---------------------------------------
    # Check parameters
    if [[ ! ${AGR_CURATION_SCHEMA_VERSION} ]] ; then
      die "Please specify a release version with -R."
    fi
}


function doParts {
    # args: cmdAbbrev; fileType; filetype, Alliance file type
    doPart "g" "genes.py"   "gene"   "GENE"
    doPart "a" "alleles.py -t alleles" "allele" "ALLELE"
    doPart "aa" "alleles.py -t associations" "allele_association" "ALLELE_ASSOCIATION"
    doPart "c" "constructs.py -t constructs" "construct" "CONSTRUCT"
    doPart "ca" "constructs.py -t associations" "construct_association" "CONSTRUCT_ASSOCIATION"
    doPart "v" "variants.py" "variant" "VARIANT"
    doPart "y" "agms.py -t genotypes"    "agm"    "AGM"
    doPart "ya" "agms.py -t associations"    "agm_association"    "AGM_ASSOCIATION" 
    doPart "d" "diseaseAnnotations.py" "disease_annotation" "DISEASE_ANNOTATION"
}

function main {
    #
    parseCommandLine $*
    #
    ODIR=`realpath "${OUTPUT_DIR}"`
    ODIR="${ODIR}/${AGR_CURATION_SCHEMA_VERSION}"
    if [[ ${RELEASE_COUNT} ]] ; then
	ODIR="${ODIR}_${RELEASE_COUNT}"
    fi
    ROOT="${ODIR}/MGI_ps"

    # ---------------------------------------
    logit
    logit "This is the Alliance Persistent Store datafeed pipeline. Starting run..."
    logit "Reading from ${PG_DBSERVER}.${PG_DBNAME}"

    # ---------------------------------------
    #
    logit "mkdir -p ${ODIR}"
    mkdir -p ${ODIR}
    checkexit

    # Check if DO_UPLOAD_TARGET is 'p', 'b', or 'a'
    if [ ${DO_UPLOAD} ]; then
        if [[ "$DO_UPLOAD_TARGET" == "p" || "$DO_UPLOAD_TARGET" == "b" || "$DO_UPLOAD_TARGET" == "a" ]]; then
            logit "Valid upload target: $DO_UPLOAD_TARGET"
        else
            logit "Invalid upload target: $DO_UPLOAD_TARGET", must be one of these: "p" for production, "b" for beta, "a" for alpha
            exit 1  # Exit with an error code
        fi
    fi

    if [[ ${LOGFILE} ]]; then
        doParts >>${LOGFILE} 2>&1
    else
        doParts
    fi

    logit "Finished."
}

main $*
